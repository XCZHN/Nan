<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\main.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\main.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Thu Feb 14 14:10:59 2019
<BR><P>
<H3>Maximum Stack Usage =        368 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Show_FFT &rArr; fft &rArr; butterfly &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[ea]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SysTick_Handler</a><BR>
 <LI><a href="#[1f]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4e]">Cleardisplay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4e]">Cleardisplay</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[22]">CAN_RX1_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[23]">CAN_SCE_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[18]">DMAChannel1_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[19]">DMAChannel2_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1a]">DMAChannel3_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1b]">DMAChannel4_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1c]">DMAChannel5_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1d]">DMAChannel6_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1e]">DMAChannel7_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from keyboard.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[e]">PVD_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[36]">RTCAlarm_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[f]">TAMPER_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[26]">TIM1_UP_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from adc.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from lrcpro.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from snake.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[32]">USART1_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[37]">USBWakeUp_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[20]">USB_HP_CAN_TX_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[21]">USB_LP_CAN_RX0_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[39]">__main</a> from __main.o(!!!main) referenced from stm32f10x.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[39]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[3a]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[3c]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[116]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[117]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[118]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[119]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[11a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[42]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[11b]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[11c]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[11d]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[3d]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[11e]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[11f]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[120]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[121]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[122]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[123]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[124]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[125]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[126]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[127]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[128]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[129]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[12a]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[12b]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[12c]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[12d]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[12e]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[12f]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[47]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[130]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[131]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[132]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[133]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[134]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[135]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[3b]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[136]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[3f]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[41]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[137]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[43]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Show_FFT &rArr; fft &rArr; butterfly &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[138]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[eb]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[46]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[139]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[48]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[5f]"></a>WFI_SET</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Standby
</UL>

<P><STRONG><a name="[d6]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fk_new
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seedget
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Snake_Ini
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMAChannel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMAChannel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMAChannel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMAChannel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMAChannel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMAChannel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMAChannel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USB_HP_CAN_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB_LP_CAN_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, stm32f10x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4a]"></a>Sys_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Sys_Init &rArr; SysInfoGet &rArr; F_Search &rArr; FAT_NextCluster &rArr; SD_ReadSingleBlock &rArr; SD_ReceiveData
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vs1003_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoGet
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_Init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cleardisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>main</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = main &rArr; Show_FFT &rArr; fft &rArr; butterfly &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fk_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Snake_Ini
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_FFT
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play_Snake
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play_Russia
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mus_Viewer
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Sys_ICO
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_String
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cleardisplay
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[5d]"></a>MY_NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYRCC_DeInit
</UL>

<P><STRONG><a name="[13a]"></a>MY_NVIC_PriorityGroupConfig</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>MY_NVIC_Init</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>MYRCC_DeInit</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MYRCC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_SetVectorTable
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
</UL>

<P><STRONG><a name="[5e]"></a>Sys_Standby</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WFI_SET
</UL>

<P><STRONG><a name="[13c]"></a>Sys_Soft_Reset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>Stm32_Clock_Init</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Stm32_Clock_Init &rArr; MYRCC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYRCC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[4c]"></a>delay_init</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[52]"></a>delay_ms</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fk_add
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Game_Over_Show
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seedget
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_show
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadPatch
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VsRamTest
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VsSineTest
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3Reset
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vs1003SoftReset
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play_Snake
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play_Russia
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[7f]"></a>delay_us</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data
</UL>

<P><STRONG><a name="[61]"></a>SPI2_ReadWriteByte</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, spi2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read_Bytes
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteSingleBlock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReceiveData
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCommand_NoDeassert
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCommand
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReady
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
</UL>

<P><STRONG><a name="[60]"></a>SPI2_Init</STRONG> (Thumb, 164 bytes, Stack size 4 bytes, spi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPI2_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[76]"></a>SPI2_SetSpeed</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, spi2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[64]"></a>SPI1_ReadWriteByte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, vs1003x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vs1003_DATA_Write
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VsRamTest
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VsSineTest
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vs1003SoftReset
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vs1003_REG_Read
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vs1003_CMD_Write
</UL>

<P><STRONG><a name="[63]"></a>SPI1_SetSpeed</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, vs1003x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vs1003_REG_Read
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vs1003_CMD_Write
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vs1003_Init
</UL>

<P><STRONG><a name="[62]"></a>Vs1003_CMD_Write</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, vs1003x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Vs1003_CMD_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SetSpeed
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSpec
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadPatch
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VsRamTest
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VsSineTest
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vs1003SoftReset
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetDecodeTime
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_SET_VOL
</UL>

<P><STRONG><a name="[65]"></a>VS_SET_VOL</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, vs1003x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = VS_SET_VOL &rArr; Vs1003_CMD_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vs1003_CMD_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mus_Play
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vs1003SoftReset
</UL>

<P><STRONG><a name="[66]"></a>ResetDecodeTime</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, vs1003x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ResetDecodeTime &rArr; Vs1003_CMD_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vs1003_CMD_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vs1003SoftReset
</UL>

<P><STRONG><a name="[67]"></a>Vs1003_REG_Read</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, vs1003x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Vs1003_REG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SetSpeed
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSpec
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDecodeTime
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHeadInfo
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vs1003SoftReset
</UL>

<P><STRONG><a name="[68]"></a>Vs1003SoftReset</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, vs1003x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Vs1003SoftReset &rArr; VS_SET_VOL &rArr; Vs1003_CMD_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vs1003_REG_Read
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetDecodeTime
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_SET_VOL
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vs1003_CMD_Write
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mus_Play
</UL>

<P><STRONG><a name="[69]"></a>Mp3Reset</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, vs1003x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Mp3Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mus_Play
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VsRamTest
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VsSineTest
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vs1003_Init
</UL>

<P><STRONG><a name="[6a]"></a>VsSineTest</STRONG> (Thumb, 382 bytes, Stack size 8 bytes, vs1003x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3Reset
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vs1003_CMD_Write
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[6b]"></a>VsRamTest</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, vs1003x.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3Reset
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vs1003_CMD_Write
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[6c]"></a>Vs1003_DATA_Write</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, vs1003x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Vs1003_DATA_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mus_Play
</UL>

<P><STRONG><a name="[6d]"></a>GetHeadInfo</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, vs1003x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetHeadInfo &rArr; Vs1003_REG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vs1003_REG_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_PROG
</UL>

<P><STRONG><a name="[6e]"></a>GetDecodeTime</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, vs1003x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetDecodeTime &rArr; Vs1003_REG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vs1003_REG_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_PROG
</UL>

<P><STRONG><a name="[6f]"></a>LoadPatch</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, vs1003x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoadPatch &rArr; Vs1003_CMD_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vs1003_CMD_Write
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mus_Play
</UL>

<P><STRONG><a name="[70]"></a>GetSpec</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, vs1003x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetSpec &rArr; Vs1003_REG_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vs1003_REG_Read
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vs1003_CMD_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mus_Play
</UL>

<P><STRONG><a name="[71]"></a>SPI1_Init</STRONG> (Thumb, 162 bytes, Stack size 4 bytes, vs1003x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPI1_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vs1003_Init
</UL>

<P><STRONG><a name="[4f]"></a>Vs1003_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, vs1003x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Vs1003_Init &rArr; Mp3Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3Reset
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SetSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[72]"></a>SD_WaitReady</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mmc_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[73]"></a>SD_SendCommand</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, mmc_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SD_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read_Bytes
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteSingleBlock
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadSingleBlock
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCSD
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCID
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[74]"></a>SD_SendCommand_NoDeassert</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, mmc_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SD_SendCommand_NoDeassert
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[75]"></a>SD_Init</STRONG> (Thumb, 532 bytes, Stack size 24 bytes, mmc_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_Init &rArr; SD_SendCommand_NoDeassert
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCommand_NoDeassert
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCommand
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_SetSpeed
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_Init
</UL>

<P><STRONG><a name="[77]"></a>SD_ReceiveData</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, mmc_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SD_ReceiveData
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadSingleBlock
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCSD
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCID
</UL>

<P><STRONG><a name="[78]"></a>SD_GetCID</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mmc_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReceiveData
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCommand
</UL>

<P><STRONG><a name="[79]"></a>SD_GetCSD</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mmc_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReceiveData
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCapacity
</UL>

<P><STRONG><a name="[7a]"></a>SD_GetCapacity</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, mmc_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCSD
</UL>

<P><STRONG><a name="[7b]"></a>SD_ReadSingleBlock</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mmc_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_ReadSingleBlock &rArr; SD_ReceiveData
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReceiveData
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mus_Play
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_name
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Search
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_PrevRead
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Read
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_File_Info
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_NextCluster
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_Init
</UL>

<P><STRONG><a name="[7c]"></a>SD_WriteSingleBlock</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, mmc_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCommand
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>

<P><STRONG><a name="[7d]"></a>SD_Read_Bytes</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, mmc_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_Read_Bytes &rArr; SD_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCommand
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HzMat
</UL>

<P><STRONG><a name="[7e]"></a>Send_Data</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lcd13164.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_comd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_data
</UL>

<P><STRONG><a name="[80]"></a>Write_data</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lcd13164.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Write_data &rArr; Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Snake_GUI
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft_show2
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_PROG
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pro_msg
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play_GUI
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Bass
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_msg
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_refresh
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_minichar
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_picture
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_font
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_icon
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_char
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cleardisplay
</UL>

<P><STRONG><a name="[81]"></a>Write_comd</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lcd13164.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Write_comd &rArr; Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_row
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_page
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_column
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
</UL>

<P><STRONG><a name="[82]"></a>Set_column</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcd13164.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Set_column &rArr; Write_comd &rArr; Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_comd
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Snake_GUI
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft_show2
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_PROG
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pro_msg
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play_GUI
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Bass
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_msg
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_refresh
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_minichar
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_cstr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_picture
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_font
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_icon
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_str
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_char
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cleardisplay
</UL>

<P><STRONG><a name="[83]"></a>Set_page</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd13164.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Set_page &rArr; Write_comd &rArr; Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_comd
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Snake_GUI
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft_show2
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_PROG
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pro_msg
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play_GUI
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Bass
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_msg
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_refresh
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_minichar
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_cstr
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_picture
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_font
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_icon
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_str
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_char
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cleardisplay
</UL>

<P><STRONG><a name="[4e]"></a>Cleardisplay</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lcd13164.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = Cleardisplay &rArr;  Cleardisplay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_page
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_column
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_data
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cleardisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Game_Over_Show
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Browse
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vs1003_GUI
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play_GUI
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_cstr
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_str
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fk_init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_FFT
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play_Snake
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mus_Viewer
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Sys_ICO
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_Init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cleardisplay
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[4d]"></a>LCD_init</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, lcd13164.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_init &rArr; Cleardisplay &rArr;  Cleardisplay (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_comd
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cleardisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[84]"></a>Set_row</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd13164.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_comd
</UL>

<P><STRONG><a name="[85]"></a>Show_char</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lcd13164.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Show_char &rArr; Set_page &rArr; Write_comd &rArr; Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_page
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_column
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_msg
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_num2
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_cstr
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_num
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_str
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_String
</UL>

<P><STRONG><a name="[86]"></a>Show_str</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lcd13164.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Show_str &rArr; Show_char &rArr; Set_page &rArr; Write_comd &rArr; Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_char
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_page
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_column
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cleardisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Handle
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Sys_ICO
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_Init
</UL>

<P><STRONG><a name="[87]"></a>Show_num</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, lcd13164.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Show_num &rArr; Show_char &rArr; Set_page &rArr; Write_comd &rArr; Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_char
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Russia_msg
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_Init
</UL>

<P><STRONG><a name="[88]"></a>Show_icon</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, lcd13164.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Show_icon &rArr; Set_page &rArr; Write_comd &rArr; Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_page
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_column
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mus_Play
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_File
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play_GUI
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_msg
</UL>

<P><STRONG><a name="[89]"></a>Show_font</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lcd13164.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Show_font &rArr; Set_page &rArr; Write_comd &rArr; Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_page
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_column
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_String
</UL>

<P><STRONG><a name="[8a]"></a>draw_picture</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lcd13164.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_page
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_column
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_data
</UL>

<P><STRONG><a name="[56]"></a>LCD_write_String</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, lcd13164.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LCD_write_String &rArr; Get_HzMat &rArr; GetSysFileSector &rArr; FAT_NextCluster &rArr; SD_ReadSingleBlock &rArr; SD_ReceiveData
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HzMat
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_font
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_char
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_name
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_File
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_FFT
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_Sys_ICO
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>LCD_write_cstr</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lcd13164.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_write_cstr &rArr; Show_char &rArr; Set_page &rArr; Write_comd &rArr; Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_char
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_page
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_column
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cleardisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Russia_GUI
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Game_Over_Show
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Snake_GUI
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vs1003_GUI
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_show
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play_Snake
</UL>

<P><STRONG><a name="[8d]"></a>Show_num2</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lcd13164.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Show_num2 &rArr; Show_char &rArr; Set_page &rArr; Write_comd &rArr; Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_char
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Game_Over_Show
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Snake_msg
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mus_Play
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_msg
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play_Snake
</UL>

<P><STRONG><a name="[8e]"></a>show_minichar</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lcd13164.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = show_minichar &rArr; Set_page &rArr; Write_comd &rArr; Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_page
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_column
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_PROG
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pro_msg
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_mininum
</UL>

<P><STRONG><a name="[8f]"></a>Show_mininum</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lcd13164.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Show_mininum &rArr; show_minichar &rArr; Set_page &rArr; Write_comd &rArr; Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_minichar
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_PROG
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pro_msg
</UL>

<P><STRONG><a name="[90]"></a>lcd_refresh</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lcd13164.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lcd_refresh &rArr; Set_page &rArr; Write_comd &rArr; Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_page
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_column
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fk_refline
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fk_refnew
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fk_reffk
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_run
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Snake_Ini
</UL>

<P><STRONG><a name="[92]"></a>lcd_read</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lcd13164.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_read
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPixel
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePixel
</UL>

<P><STRONG><a name="[93]"></a>lcd_write</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, lcd13164.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lcd_write
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePixel
</UL>

<P><STRONG><a name="[91]"></a>WritePixel</STRONG> (Thumb, 94 bytes, Stack size 28 bytes, lcd13164.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WritePixel &rArr; lcd_write
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_read
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Russia_GUI
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Big_pinxl
</UL>

<P><STRONG><a name="[94]"></a>ReadPixel</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, lcd13164.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ReadPixel &rArr; lcd_read
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_read
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hit_Self
</UL>

<P><STRONG><a name="[95]"></a>Big_pinxl</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lcd13164.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Big_pinxl &rArr; WritePixel &rArr; lcd_write
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePixel
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fk_refline
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fk_refnew
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fk_reffk
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_run
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seedget
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Snake_Ini
</UL>

<P><STRONG><a name="[d4]"></a>clearlcdram</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lcd13164.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fk_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Snake_Ini
</UL>

<P><STRONG><a name="[96]"></a>save_show</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lcd13164.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_cstr
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[97]"></a>MP3_msg</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, lcd13164.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MP3_msg &rArr; Show_num2 &rArr; Show_char &rArr; Set_page &rArr; Write_comd &rArr; Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_num2
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_icon
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_char
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_page
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_column
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mus_Play
</UL>

<P><STRONG><a name="[98]"></a>Show_Bass</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lcd13164.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Show_Bass &rArr; Set_page &rArr; Write_comd &rArr; Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_page
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_column
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mus_Play
</UL>

<P><STRONG><a name="[99]"></a>Play_GUI</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, lcd13164.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Play_GUI &rArr; Show_icon &rArr; Set_page &rArr; Write_comd &rArr; Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_icon
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_page
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_column
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_data
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cleardisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mus_Play
</UL>

<P><STRONG><a name="[9a]"></a>Pro_msg</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, lcd13164.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_mininum
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_minichar
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_page
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_column
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_data
</UL>

<P><STRONG><a name="[9b]"></a>Vs1003_GUI</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, lcd13164.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_cstr
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cleardisplay
</UL>

<P><STRONG><a name="[9d]"></a>get_key</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, keyboard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Handle
</UL>

<P><STRONG><a name="[9c]"></a>Key_Handle</STRONG> (Thumb, 348 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Key_Handle &rArr; Show_str &rArr; Show_char &rArr; Set_page &rArr; Write_comd &rArr; Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_key
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_str
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EXTI9_5_IRQHandler &rArr; Key_Handle &rArr; Show_str &rArr; Show_char &rArr; Set_page &rArr; Write_comd &rArr; Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Handle
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>NVIC_Configuration</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyboard_init
</UL>

<P><STRONG><a name="[53]"></a>keyboard_init</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, keyboard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = keyboard_init &rArr; NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[a5]"></a>ADC_GPIO_Init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_int
</UL>

<P><STRONG><a name="[a6]"></a>ADC1_Init</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_int
</UL>

<P><STRONG><a name="[a2]"></a>NVIC_TIMER2Configuration</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NVIC_TIMER2Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
</UL>

<P><STRONG><a name="[a3]"></a>Timer2_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Timer2_Init &rArr; NVIC_TIMER2Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_TIMER2Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_int
</UL>

<P><STRONG><a name="[a4]"></a>ADC_DMA_int</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ADC_DMA_int &rArr; Timer2_Init &rArr; NVIC_TIMER2Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_FFT
</UL>

<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM2_IRQHandler &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>get_DW</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_Init
</UL>

<P><STRONG><a name="[50]"></a>FAT_Init</STRONG> (Thumb, 494 bytes, Stack size 24 bytes, fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = FAT_Init &rArr; Show_num &rArr; Show_char &rArr; Set_page &rArr; Write_comd &rArr; Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_DW
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_num
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_str
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadSingleBlock
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cleardisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[aa]"></a>FAT_NextCluster</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FAT_NextCluster &rArr; SD_ReadSingleBlock &rArr; SD_ReceiveData
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadSingleBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mus_Play
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysFileSector
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_name
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Search
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Read
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_File_Info
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_PrevCluster
</UL>

<P><STRONG><a name="[ab]"></a>FAT_PrevCluster</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_NextCluster
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_PrevRead
</UL>

<P><STRONG><a name="[b0]"></a>fatClustToSect</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mus_Play
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_name
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Search
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_PrevRead
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Read
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_File_Info
</UL>

<P><STRONG><a name="[ad]"></a>FileType_Tell</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FileType_Tell
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_File_Info
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyDirentruyItem
</UL>

<P><STRONG><a name="[ac]"></a>CopyDirentruyItem</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CopyDirentruyItem &rArr; UniToGB &rArr; UnicodeToGB2312
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UniToGB
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileType_Tell
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_name
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Search
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_File_Info
</UL>

<P><STRONG><a name="[af]"></a>Get_File_Info</STRONG> (Thumb, 824 bytes, Stack size 64 bytes, fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Get_File_Info &rArr; FAT_NextCluster &rArr; SD_ReadSingleBlock &rArr; SD_ReceiveData
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyDirentruyItem
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileType_Tell
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatClustToSect
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_NextCluster
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadSingleBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mus_Play
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Browse
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_file_num
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mus_Viewer
</UL>

<P><STRONG><a name="[13d]"></a>F_Open</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fat.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>F_Read</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatClustToSect
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_NextCluster
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadSingleBlock
</UL>

<P><STRONG><a name="[b2]"></a>F_PrevRead</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatClustToSect
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_PrevCluster
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadSingleBlock
</UL>

<P><STRONG><a name="[b4]"></a>mystrcmp</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mystrcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Search
</UL>

<P><STRONG><a name="[b3]"></a>F_Search</STRONG> (Thumb, 346 bytes, Stack size 144 bytes, fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = F_Search &rArr; FAT_NextCluster &rArr; SD_ReadSingleBlock &rArr; SD_ReceiveData
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mystrcmp
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyDirentruyItem
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatClustToSect
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_NextCluster
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadSingleBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInfoGet
</UL>

<P><STRONG><a name="[51]"></a>SysInfoGet</STRONG> (Thumb, 420 bytes, Stack size 24 bytes, fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SysInfoGet &rArr; F_Search &rArr; FAT_NextCluster &rArr; SD_ReadSingleBlock &rArr; SD_ReceiveData
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;F_Search
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Init
</UL>

<P><STRONG><a name="[b5]"></a>get_file_name</STRONG> (Thumb, 196 bytes, Stack size 160 bytes, fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyDirentruyItem
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatClustToSect
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_NextCluster
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadSingleBlock
</UL>

<P><STRONG><a name="[b6]"></a>get_file_num</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_File_Info
</UL>

<P><STRONG><a name="[b7]"></a>GetSysFileSector</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GetSysFileSector &rArr; FAT_NextCluster &rArr; SD_ReadSingleBlock &rArr; SD_ReceiveData
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_NextCluster
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_HzMat
</UL>

<P><STRONG><a name="[8b]"></a>Get_HzMat</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Get_HzMat &rArr; GetSysFileSector &rArr; FAT_NextCluster &rArr; SD_ReadSingleBlock &rArr; SD_ReceiveData
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysFileSector
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Read_Bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_String
</UL>

<P><STRONG><a name="[b8]"></a>UnicodeToGB2312</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, untogb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UnicodeToGB2312
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UniToGB
</UL>

<P><STRONG><a name="[ae]"></a>UniToGB</STRONG> (Thumb, 136 bytes, Stack size 20 bytes, untogb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UniToGB &rArr; UnicodeToGB2312
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnicodeToGB2312
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyDirentruyItem
</UL>

<P><STRONG><a name="[54]"></a>Load_Sys_ICO</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Load_Sys_ICO &rArr; LCD_write_String &rArr; Get_HzMat &rArr; GetSysFileSector &rArr; FAT_NextCluster &rArr; SD_ReadSingleBlock &rArr; SD_ReceiveData
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_str
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_String
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cleardisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13e]"></a>Load_Gui_Mp3</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gui.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>Show_File</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Show_File &rArr; LCD_write_String &rArr; Get_HzMat &rArr; GetSysFileSector &rArr; FAT_NextCluster &rArr; SD_ReadSingleBlock &rArr; SD_ReceiveData
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_icon
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_String
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Browse
</UL>

<P><STRONG><a name="[ba]"></a>File_Browse</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, gui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = File_Browse &rArr; Show_File &rArr; LCD_write_String &rArr; Get_HzMat &rArr; GetSysFileSector &rArr; FAT_NextCluster &rArr; SD_ReadSingleBlock &rArr; SD_ReceiveData
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_File
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_File_Info
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cleardisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mus_Viewer
</UL>

<P><STRONG><a name="[bb]"></a>MP3_PROG</STRONG> (Thumb, 516 bytes, Stack size 56 bytes, mp3player.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MP3_PROG &rArr; Show_mininum &rArr; show_minichar &rArr; Set_page &rArr; Write_comd &rArr; Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_mininum
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_minichar
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_page
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_column
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_data
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDecodeTime
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHeadInfo
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mus_Play
</UL>

<P><STRONG><a name="[c0]"></a>music_name</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mp3player.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = music_name &rArr; LCD_write_String &rArr; Get_HzMat &rArr; GetSysFileSector &rArr; FAT_NextCluster &rArr; SD_ReadSingleBlock &rArr; SD_ReceiveData
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_String
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mus_Play
</UL>

<P><STRONG><a name="[c1]"></a>Mus_Play</STRONG> (Thumb, 996 bytes, Stack size 112 bytes, mp3player.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Mus_Play &rArr; music_name &rArr; LCD_write_String &rArr; Get_HzMat &rArr; GetSysFileSector &rArr; FAT_NextCluster &rArr; SD_ReadSingleBlock &rArr; SD_ReceiveData
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_name
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_PROG
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_File_Info
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fatClustToSect
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_NextCluster
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play_GUI
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Bass
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_msg
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_num2
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_icon
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadSingleBlock
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSpec
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadPatch
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vs1003_DATA_Write
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mp3Reset
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vs1003SoftReset
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VS_SET_VOL
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mus_Viewer
</UL>

<P><STRONG><a name="[55]"></a>Mus_Viewer</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, mp3player.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Mus_Viewer &rArr; Mus_Play &rArr; music_name &rArr; LCD_write_String &rArr; Get_HzMat &rArr; GetSysFileSector &rArr; FAT_NextCluster &rArr; SD_ReadSingleBlock &rArr; SD_ReceiveData
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mus_Play
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;File_Browse
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_File_Info
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cleardisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lrcpro.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>NVIC_TIMER3Configuration</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lrcpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NVIC_TIMER3Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_init
</UL>

<P><STRONG><a name="[c2]"></a>timer3_init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, lrcpro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = timer3_init &rArr; NVIC_TIMER3Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_TIMER3Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mus_Play
</UL>

<P><STRONG><a name="[c4]"></a>butterfly</STRONG> (Thumb, 528 bytes, Stack size 120 bytes, my_fft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = butterfly &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft
</UL>

<P><STRONG><a name="[cf]"></a>fft</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, my_fft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = fft &rArr; butterfly &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;butterfly
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_FFT
</UL>

<P><STRONG><a name="[d1]"></a>fft_show2</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, my_fft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fft_show2 &rArr; Set_page &rArr; Write_comd &rArr; Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_page
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_column
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft_show
</UL>

<P><STRONG><a name="[d2]"></a>fft_show</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, my_fft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fft_show &rArr; fft_show2 &rArr; Set_page &rArr; Write_comd &rArr; Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft_show2
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_FFT
</UL>

<P><STRONG><a name="[57]"></a>Show_FFT</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, my_fft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = Show_FFT &rArr; fft &rArr; butterfly &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft_show
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_int
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_String
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cleardisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>Hit_Self</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, snake.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Hit_Self &rArr; ReadPixel &rArr; lcd_read
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seedget
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Snake_Ini
</UL>

<P><STRONG><a name="[58]"></a>Snake_Ini</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, snake.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Snake_Ini &rArr; Big_pinxl &rArr; WritePixel &rArr; lcd_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hit_Self
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearlcdram
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Big_pinxl
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_refresh
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seedget
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d7]"></a>Snake_msg</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, snake.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Snake_msg &rArr; Show_num2 &rArr; Show_char &rArr; Set_page &rArr; Write_comd &rArr; Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_num2
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seedget
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play_Snake
</UL>

<P><STRONG><a name="[d8]"></a>seedget</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, snake.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = seedget &rArr; Snake_Ini &rArr; Big_pinxl &rArr; WritePixel &rArr; lcd_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Snake_msg
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hit_Self
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Big_pinxl
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Snake_Ini
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_run
</UL>

<P><STRONG><a name="[d9]"></a>snake_run</STRONG> (Thumb, 440 bytes, Stack size 16 bytes, snake.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = snake_run &rArr; seedget &rArr; Snake_Ini &rArr; Big_pinxl &rArr; WritePixel &rArr; lcd_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seedget
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Big_pinxl
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play_Snake
</UL>

<P><STRONG><a name="[da]"></a>Snake_GUI</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, snake.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Snake_GUI &rArr; LCD_write_cstr &rArr; Show_char &rArr; Set_page &rArr; Write_comd &rArr; Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_cstr
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_page
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_column
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play_Snake
</UL>

<P><STRONG><a name="[db]"></a>Game_Over_Show</STRONG> (Thumb, 390 bytes, Stack size 16 bytes, snake.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Game_Over_Show &rArr; Show_num2 &rArr; Show_char &rArr; Set_page &rArr; Write_comd &rArr; Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_num2
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_cstr
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cleardisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play_Snake
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play_Russia
</UL>

<P><STRONG><a name="[dc]"></a>NVIC_TIMER4Configuration</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, snake.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NVIC_TIMER4Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Init
</UL>

<P><STRONG><a name="[dd]"></a>Timer4_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, snake.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Timer4_Init &rArr; NVIC_TIMER4Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_TIMER4Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play_Snake
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play_Russia
</UL>

<P><STRONG><a name="[59]"></a>Play_Snake</STRONG> (Thumb, 518 bytes, Stack size 16 bytes, snake.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Play_Snake &rArr; snake_run &rArr; seedget &rArr; Snake_Ini &rArr; Big_pinxl &rArr; WritePixel &rArr; lcd_write
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Game_Over_Show
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Snake_GUI
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snake_run
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Snake_msg
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_num2
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_cstr
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cleardisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, snake.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>fk_reffk</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, russia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fk_reffk &rArr; Big_pinxl &rArr; WritePixel &rArr; lcd_write
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Big_pinxl
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play_Russia
</UL>

<P><STRONG><a name="[df]"></a>fk_refnew</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, russia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fk_refnew &rArr; Big_pinxl &rArr; WritePixel &rArr; lcd_write
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Big_pinxl
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fk_new
</UL>

<P><STRONG><a name="[e0]"></a>fk_refline</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, russia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fk_refline &rArr; Big_pinxl &rArr; WritePixel &rArr; lcd_write
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Big_pinxl
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fk_add
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fk_init
</UL>

<P><STRONG><a name="[e5]"></a>fk_chk</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, russia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fk_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play_Russia
</UL>

<P><STRONG><a name="[e1]"></a>fk_new</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, russia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fk_new &rArr; fk_refnew &rArr; Big_pinxl &rArr; WritePixel &rArr; lcd_write
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fk_refnew
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fk_add
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fk_init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play_Russia
</UL>

<P><STRONG><a name="[e2]"></a>Russia_msg</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, russia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Russia_msg &rArr; Show_num &rArr; Show_char &rArr; Set_page &rArr; Write_comd &rArr; Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_num
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Russia_GUI
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fk_add
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play_Russia
</UL>

<P><STRONG><a name="[e3]"></a>fk_add</STRONG> (Thumb, 424 bytes, Stack size 24 bytes, russia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fk_add &rArr; Russia_msg &rArr; Show_num &rArr; Show_char &rArr; Set_page &rArr; Write_comd &rArr; Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Russia_msg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fk_new
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fk_refline
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play_Russia
</UL>

<P><STRONG><a name="[5a]"></a>fk_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, russia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = fk_init &rArr; fk_new &rArr; fk_refnew &rArr; Big_pinxl &rArr; WritePixel &rArr; lcd_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fk_new
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fk_refline
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearlcdram
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cleardisplay
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>Russia_GUI</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, russia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Russia_GUI &rArr; Russia_msg &rArr; Show_num &rArr; Show_char &rArr; Set_page &rArr; Write_comd &rArr; Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Russia_msg
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WritePixel
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_write_cstr
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Play_Russia
</UL>

<P><STRONG><a name="[5b]"></a>Play_Russia</STRONG> (Thumb, 616 bytes, Stack size 16 bytes, russia.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Play_Russia &rArr; fk_add &rArr; Russia_msg &rArr; Show_num &rArr; Show_char &rArr; Set_page &rArr; Write_comd &rArr; Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Russia_GUI
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fk_add
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Russia_msg
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fk_new
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fk_chk
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fk_reffk
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer4_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Game_Over_Show
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d5]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fk_new
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seedget
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Snake_Ini
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[3e]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[13f]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[e8]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[142]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[145]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[45]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[146]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[a1]"></a>NVIC_Init</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, stm32f10x_nvic.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_TIMER4Configuration
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_TIMER3Configuration
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_TIMER2Configuration
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[a0]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_nvic.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_TIMER4Configuration
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_TIMER3Configuration
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_TIMER2Configuration
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[9f]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_nvic.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_TIMER4Configuration
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_TIMER3Configuration
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_TIMER2Configuration
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[f5]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[ec]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 828 bytes, Stack size 128 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[f2]"></a>__kernel_cos</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[f3]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[f4]"></a>__kernel_sin</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[f7]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[f8]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[f6]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[ca]"></a>cos</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;butterfly
</UL>

<P><STRONG><a name="[c8]"></a>sin</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;butterfly
</UL>

<P><STRONG><a name="[d0]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft
</UL>

<P><STRONG><a name="[cc]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;butterfly
</UL>

<P><STRONG><a name="[fa]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;butterfly
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[fd]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[100]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;butterfly
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>

<P><STRONG><a name="[102]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[103]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[149]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[c5]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;butterfly
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[14a]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[c6]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;butterfly
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[104]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[fc]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[ff]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[105]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[f9]"></a>_dsqrt</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, dsqrt_noumaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[ed]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[107]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;butterfly
</UL>

<P><STRONG><a name="[108]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;butterfly
</UL>

<P><STRONG><a name="[10a]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[10f]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_PROG
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[10c]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft_show
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_PROG
</UL>

<P><STRONG><a name="[10d]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_PROG
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[14b]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[bf]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_PROG
</UL>

<P><STRONG><a name="[10e]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[112]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[bc]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_PROG
</UL>

<P><STRONG><a name="[110]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[109]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[fb]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MP3_PROG
</UL>

<P><STRONG><a name="[111]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[ce]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;butterfly
</UL>

<P><STRONG><a name="[113]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[101]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[f1]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[115]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[106]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[fe]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[114]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[10b]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
